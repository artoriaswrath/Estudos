Array: Sets 
Não ordenado, não indexado, pode ser incrementado mas não alterado. É escrito com chaves. 
Uso: 
A = {"elemento1", "elemento2", elemento3"} 
print(A) retorna {'elemento1', 'elemento2', 'elemento3'}
 
O array criado é semelhante ao das outras coleções, entretanto não possuem índice e nem uma órdem. 

É possível imprimir na tela todos os elementos desse set usando o loop (Estrutura repetitiva) "for":
for x in A: 
   print(x)
Entretanto, não da pra prever a ordem em que esses itens serão exibidos. 

Para determinar se um item especificado pertence a tal set, usa-se a palavra-chave "in"
A = ("elemento1", "elemento2", "elemento3") 
if "elemento2" in A: 
   print("Sim, elemento2 está em A") 

É impossível mudar os itens de um set, entretando você pode adicionar itens a ele: 
Usa-se o metodo add() para adicionar apenas um elemento: 
A.add("elemento4") 

Ou o metodo update() para adicionar multiplos ítens
A.update(["elemento4", "elemento 5", "elemento6"])

Para determinar a quantidade de elementos do set, use a função len(): 
print(len(A))

remove () remove um ítem especificado
Uso: 
A.remove ("elemento4") 
Se o item não existir, remove() vai retornar um erro. 

discard() funciona da mesma forma, com a diferença de que, se o elemento não existir, discard() não retorna um erro.

pop() remove o último item do set, entretanto sets não são ordenados, então é impossível saber qual item será removido. 

clear() limpa o set completamente.

A palavra-chave del deleta o set: 
del A


É possível juntar dois sets das seguintes formas:

union() junta os dois em um novo set
Ex: 
set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}

set3 = set1.union(set2)

update() coloca um set no outro
Ex: 
set1 = {"a", "b" , "c"}
set2 = {1, 2, 3}

set1.update(set2)

É possível criar um set usando o construtor set()
A = set(("elemento1", "elemento2", "elemento3"))